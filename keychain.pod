=head1 NAME

keychain - Manager for ssh-agent, gpg-agent and private keys. Compatible with POSIX systems.

=head1 SYNOPSIS

S<keychain [ -hklQqV ]> [ --clear --confhost --confallhosts --debug --gpg2 --help --ignore-missing --list
--noask --nocolor --nogui --noinherit --nolock --quick --quiet --ssh-allow-forwarded --ssh-spawn-gpg
--systemd --version
S<[ --ssh-agent-socket I<path> ] [ --attempts I<num> ]>
S<[ --dir I<dirname> ] [ --host I<name> ] [ --lockwait I<seconds> ]>
S<[ --stop I<which> ] [ --timeout I<minutes> ] [ keys... ]>

=head1 DESCRIPTION

Keychain is a manager for ssh-agent and is typically run from ~/.bash_profile.
It allows your shells and cron jobs to easily share a single ssh-agent process,
and ensure any necessary private keys are loaded and available for use. By
default, the ssh-agent started by keychain is long-running and will continue to
run, even after you have logged out from the system.

Keychain also supports GnuPG 2.1 and later, and will automatically start
gpg-agent if any GPG keys are referenced on the command-line, and will ensure
these credentials are cached in memory and available for use.

Keychain supports most UNIX-like operating systems.
It works with Bourne-compatible, csh-compatible and fish shells.

=head1 LIFECYCLE

Typically, you configure keychain to run when you first log in to a system.
If you are using Bourne shell or bash, you will create a C<~/.profile> or 
C<~/.bash_profile> file and include the following line in it:

    eval "$(keychain --eval id_rsa)"

Keychain will start ssh-agent if one isn't already running. Keychain then
checks to make sure your private keys (in this example, "id_rsa") are loaded
into the agent. If they are not, you are prompted for any passphrase necessary
to decrypt them, so that they are cached in memory and available for use. 

In addition to printing some user-friendly output to your terminal, keychain
will also output important ssh-agent environment variables, which the "$( )"
(you can also use "` `") captures, and the "eval" evaluates, setting these
variables in your current shell.

These ssh-agent environment variables are also written to
C<~/.keychain/${HOSTNAME}-sh>, so that subsequent logins and non-interactive
shells such as cron jobs can source the file to access the running ssh-agent
and make passwordless ssh connections using the cached private keys --
even when you are logged out. These files are collectively called B<pidfiles>.

The key files specified on the command-line will be searched for in the
C<~/.ssh/> directory, and keychain will expect to find the private key file
with the same name, as well as a C<.pub> public key.

Typically, private key files are specified by filename only, without path, 
although it is possible to specify an absolute or relative
path to the private key file as well. Private key files can be symlinks
to the actual key as long as your system has the C<readlink> command available.
More advanced features are available for specifying keys as well -- see the
 B<--confhost> and B<--confallhosts> options for more information.

In addition, if a GPG key is specified and found in C<~/.gnupg>, a gpg-agent
will be started, and similar steps will be taken to ensure that gpg-agent
has the GPG key loaded and ready for use.

=head1 STREAMLINING AND SIMPLIFICATION

Keychain 2.9.0 has been streamlined, and with this maintenance several
command-line options have been retired as they are not completely necessary.
This simplifies the use of the tool by making it more intuitive to use.
The files created in ~/.keychain have also been cleaned up. This section
details all the important changes.

=head2 PIDFILE CHANGES

"Pidfile" is the nickname for files created in C<~/.keychain> which can then
be sourced by your scripts to access a running agent.

When using gpg-agent for GPG keys, keychain will no longer create a
C<~/.keychain/${HOSTNAME}-sh-gpg> pidfile. This file is no longer needed
as the canonical GPG socket inside C<~/.gnupg/> will be used to detect the
running gpg-agent, which is the modern convention. GnuPG 2.1 and later 
have stopped using environment variables to find the agent. 

=head2 IMPROVED DEBUGGING

A new B<--debug> option is now available which will print additional information
related to keychain's decisions regarding why and how an agent was found -- or
not.

=head2 DISPLAY CHANGES

When keychain uses gpg-agent for either GnuPG or SSH support, then keychain will display
the GnuPG socket file in its output, rather than the PID. Since the socket
file has the C<~/.gnupg> path in it, this communicates to you that gpg-agent,
not ssh-agent, is active. If you see an integer PID, this means that ssh-agent
is being used.

=head2 SIMPLIFIED OPTIONS

The "--agents" option is now deprecated. Keychain will always ensure an
ssh-agent is running, or if "--ssh-spawn-gpg" is used, potentially a
gpg-agent if no valid ssh-agent is available.

Specifying a GPG key on the command-line will instruct keychain to 
enable gpg-agent functionality automatically. This eliminates an option 
that you need to specify when invoking keychain, and likely will avoid
spawning a daemon you may not be using. Specifying the "--agents" option 
will now display a warning that it's deprecated, but keychain will not
abort.

The "--inherit" option, which took one of four arguments, has been 
deprecated. Keychain's default behavior remains that of "local-once",
and you can influence keychain's behavior via the still-present 
"--noinherit" option as well as the "--ssh-allow-forwarded" options, 
which will allow SSH-forwarded authentication sockets to be used by keychain,
which are disabled by default. If this option is specified, keychain
will print a warning but will not abort.

The "--clear" option is still available, but isn't intended to be a 
"standalone" option, meaning that it is used to perform an initial clearing
of cached keys before loading any specified keys when Keychain is run.

The "--stop" option will now only stop any running ssh-agent processes,
and still supports three possible options: "mine", "others" and "all".
It no longer stops gpg-agent processes, which tend to get auto-respawned
by GPG tools, so killing gpg-agent typically doesn't make a lot of sense.

=head2 BETTER GNUPG INTEGRATION

Keychain can now use an existing gpg-agent that has been started in your
environment to store ssh keys, rather than spawning its own ssh-agent, by
usig the "--ssh-allow-gpg" option.

If you would like keychain to spawn gpg-agent instead of ssh-agent, and
use it to store SSH keys, specify the "--ssh-spawn-gpg" option.

Without either option, keychain will not use an SSH_AUTH_SOCK that is
provided by gpg-agent, and will spawn an official ssh-agent process.

In addition, behind the scenes, keychain now uses the gpg-connect-agent 
executable to restart the agent, get official PID and socket information, etc.

Please note that while gpg-agent provides full compatibility with ssh-agent,
its password prompt is handled by pinentry and its store may encrypt your
in-memory keys. For this reason, consider
this new feature experimental, and use GitHub issues to report back any 
anomalies or suggested improvements for gpg-agent integration.

=head2 STREAMLINED STARTUP

By default, keychain will always ensure that an ssh-agent should be started.
It will only start a gpg-agent if a GPG key is referenced on the command-line.

Modern versions of gpg-agent also support the caching of SSH keys, allowing it
to be a drop-in replacement for ssh-agent. With keychain 2.9.0, a new 
"--ssh-spawn-gpg" option has been added, which when specified will give 
keychain permission to spawn a gpg-agent in place of ssh-agent. 

=head2 CODE OPTIMIZATION

With keychain 2.9.0, there has been significant code cleanup, reducing the size
of the script from 1500 lines to about 1100 lines. In addition, the script is
now fully compliant with L<ShellCheck|https://shellcheck.net>, which will be
hugely helpful to ensure continued POSIX shell compatibility moving forward.

=head1 AGENT DETECTION AND STARTUP ALGORITHM

This section documents the official algorithm used for detecting and if necessary
starting ssh-agent, to facilitate understanding as well as developer maintenance
of the codebase.

=head2 DEFINITIONS

There are several important definition related to the algorithm:

=over

=item 1. The B<agent>, "ssh-agent", which is a long-running daemon. This can also
    in some cases be "gpg-agent", depending on command-line options.

=item 2. The B<inherited agent>, which is the agent or forwarded agent that was not started by keychain,
    but is detected in the environment or by other means.

=item 3. The B<adopted agent>, which is an B<inherited agent> whose information has
    been persisted by being written to the B<pidfiles> (see below).

=item 4. The B<environment variables> C<SSH_AUTH_SOCK>, which points to the socket file
    used to communicate with ssh-agent, and optionally C<SSH_AGENT_PID>, which indicates
    its process ID if running locally (although gpg-agent does not define C<SSH_AGENT_PID>,
    even if running locally.)

=item 5. The file C<~/.keychain/${HOSTNAME}-sh> and related files, which are
    collectively referred to as "B<pidfiles>". 
   Pidfiles are used to persistently store C<SSH_AUTH_SOCK> and C<SSH_AGENT_PID>
   environment variables for use by other scripts, as well as by keychain itself,
   formatted so that they can be "sourced" by shells of various types.

=item 6. Relevant B<command-line options> affecting behavior, which include B<--noinherit>,
    B<--ssh-allow-gpg>, B<--ssh-use-gpg>, and B<--ssh-allow-forwarded>.

=back

=head2 ALGORITHM OVERVIEW

When the keychain script is run, it will first attempt to find a running ssh-agent.

=over

=item Phase 1: pidfile: To do this, it will first look for an existing B<pidfile>. If one exists, it will
be inspected and used to find a running agent, in alignment with specified
B<command-line options>. If this process is successful, a "keychain-spawned" agent is 
found and this process is complete. Otherwise, we continue to the next step.

=item Phase 2: environment: If keychain's B<pidfile> did not yield a running agent, keychain looks at 
B<environment variables> defined in the current environment. This step will be skipped if the
B<--noinherit> option is specified. If an agent is found
that is in alignment with specified B<command-line options>, it is considered "B<inherited>" by keychain,
and the process is complete. Otherwise, we continue to the next step.

=item Phase 3: spawn agent: In the absence of finding a keychain-spawned or existing agent that can be
adopted, keychain will spawn a new ssh-agent, or a new gpg-agent if 
B<--ssh-spawn-gpg> is specified and gpg-agent is available.

=item Final Phase: update pidfile: In addition, the B<pidfile>s will be updated to reflect the keychain-spawned or
B<"inherited"> agent. An B<"inherited"> agent, once written to the B<pidfile>, is now considered
to be B<"adopted">.

=item Pidfile update exception: If the B<--ssh-allow-forwarded> option was specified,
and a forwarded SSH socket was found -- which is identified as a valid SSH
socket defined in a C<SSH_AUTH_SOCK> variable, which has no associated or
valid C<SSH_AGENT_PID> also defined in the environment and is also determined to not 
be the socket of any running gpg-agent -- then this agent will simply be used, B<but not persisted> in any
B<pidfile>. This is because this SSH-supplied
socket will disappear when the underlying SSH connection terminates, and thus
it cannot be relied on to be available persistently.

=back

=head2 THE QUICK SHORT-CIRCUIT

When the B<--quick> option is specified, a special algorithm will run prior to the
main agent-detection algorithm listed above. A pidfile, if it exists, will be
evaluated as per Phase 1 of the main algorithm. If a valid running agent
is found, it will be queried for valid keys. If at least one valid key is loaded
into the agent, the quick start is considered successful, and keychain will skip
the regular agent startup algorithm, and will use this found agent.

=head2 SUMMARY AND RATIONALE

The keychain ssh-agent detection and startup algorithm is somewhat sophisticated for
a reason. There is an intention behind its behavior.

The algorithm has been specifically designed to prefer an agent spawned by keychain,
or previously adopted, if that agent is currently available. This is by design, because
other system software could spawn ssh-agent and/or gpg-agent processes, and we want keychain to 
not coerced into using these new agents which may suddenly appear in the environment
unexpectedly when new desktop sessions start and in other circumstances.  If keychain
is too "suggestible", it will lose track of the agent which currently holds valid keys,
which can result in unncessary prompting for passphrases, and general confusion.

=head1 OPTIONS

=over

=item B<--attempts> I<num>

Try num times to add keys before giving up.  The default is 1.

=item B<--clear>

Ensure that keys for the agents are wiped initially. This is intended
to be used alongside keychain --eval to ensure that only the specified
keys are loaded, and that keychain should assume that you are an intruder
until proven otherwise and force all interactive logins to specify valid
passphrases.  This option increases security and  still allows your 
cron jobs to use your ssh keys when you're logged out.

=item B<--debug>

Keychain 2.9.0 introduces the B<--debug> option, which will output 
additional information related to how Keychain makes its agent-selection
process. Specifically, it will output when an B<SSH_AUTH_SOCK> is rejected
because it is being supplied by gpg-agent -- and this is not allowed
due to no B<--ssh-allow-gpg> option, or when it is rejected because it
appears to be from a forwarded SSH connection, and B<--ssh-allow-forwarded>
was not supplied.

=item B<--confhost>

By default, keychain will look for key pairs in the ~/.ssh/ directory.
The --confhost option will inform keychain to look in ~/.ssh/config
for IdentityFile settings defined for the mentioned host (in I<keys>), 
and use these paths to locate keys.

=item B<--confallhosts>

By default, keychain will look for key pairs in the ~/.ssh/ directory.
The --confallhosts option will inform keychain to look in ~/.ssh/config
for IdentityFile settings defined for all hosts, and use these
paths to locate keys to load.

=item B<--confirm>

Keys are subject to interactive confirmation by the SSH_ASKPASS
program before being used for authentication.  See the -c option for
ssh-add(1).

=item B<--absolute>

Any arguments to "--dir" are interpreted to be absolute. The default
behavior is to append "/.keychain" to the argument for backwards
compatibility.

=item B<--dir> I<dirname>

Keychain will use dirname rather than $HOME/.keychain

=item B<--query>

Keychain will print lines in KEY=value format representing the values
which are set by the agents.

=item B<--eval>

Keychain will print lines to be evaluated in the shell on stdout.  It
respects the SHELL environment variable to determine if Bourne shell
or C shell output is expected.

=item B<--env> I<filename>

After parsing options, keychain will load additional environment
settings from "filename".  By default, if "--env" is not given, then
keychain will attempt to load from ~/.keychain/[hostname]-env or
alternatively ~/.keychain/env.  The purpose of this file is to
override settings such as PATH, in case ssh is stored in
a non-standard place.

=item B<--gpg2>

This option changes the default gpg calls to use gpg2 instead to support
distributions such as Ubuntu which has both gpg and gpg2

=item B<-h --help>

Show help that looks remarkably like this man-page. As of 2.6.10,
help is sent to stdout so it can be easily piped to a pager.

=item B<--host> I<name>

Set alternate hostname for creation of pidfiles

=item B<--ignore-missing>

Don't warn if some keys on the command-line can't be found.  This is
useful for situations where you have a shared .bash_profile, but your
keys might not be available on every machine where keychain is run.

=item B<-l --list>

List signatures of all active SSH keys, and exit, similar to "ssh-add -l".

=item B<-L --list-fp>

List fingerprints of all active SSH keys, and exit, similar to "ssh-add -L".

=item B<--lockwait> I<seconds>

How long to wait for the lock to become available.  Defaults to 5
seconds. Specify a value of zero or more. If the lock cannot be 
acquired within the specified number of seconds, then this keychain
process will forcefully acquire the lock.

=item B<--noask>

This option tells keychain do everything it normally does (ensure
ssh-agent is running, set up the ~/.keychain/[hostname]-{c}sh files)
except that it will not prompt you to add any of the keys you
specified if they haven't yet been added to ssh-agent.

=item B<--nocolor>

Disable color highlighting for non ANSI-compatible terms.

=item B<--nogui>

Don't honor SSH_ASKPASS, if it is set.  This will cause ssh-add to
prompt on the terminal instead of using a graphical program.

=item B<--noinherit>

Don't inherit any agent processes, overriding the default behavior
of inheriting all non-forwarded ssh-agent and any existing
gpg-agent processes. Also see L<AGENT DETECTION AND STARTUP ALGORITHM>.

=item B<--nolock>

Don't attempt to use a lockfile while manipulating files, pids and
keys.

=item B<--nosub>

By default, keychain will use gpg-agent in place of ssh-agent if
gpg-agent is available and supports this functionality. This option
will disable this and any future potential substitution of original
programs, so only ssh-agent will be used for SSH support, etc.

=item B<-k --stop> I<which>

Kill currently running ssh-agent processes, wipe pidfiles, and exit.

Note that previous versions of keychain (2.8.5 and earlier) allowed
killing of gpg-agent as well. This functionality was removed as
ssh-agent and gpg-agent have a bit different design philosophies
and you almost always only have at most one gpg-agent running at
a time. Use "killall gpg-agent" if you really want to kill gpg-agent.
However, since this option also removes pidfiles, it will remove
any gpg-agent processes adopted by keychain that were being used to
store ssh keys.

The following values are valid for "which" which controls which
ssh-agents to target:

=over 9

=item all

Kill all ssh-agent processes and quit keychain immediately.  Prior to
keychain-2.5.0, this was the behavior of the bare "--stop" option.

=item others

Kill agent processes other than the ones keychain is providing.  Prior
to keychain-2.5.0, keychain would do this automatically.  The new
behavior requires that you specify it explicitly if you want it.

=item mine

Kill keychain's agent processes, leaving other agents alone.

=back

=item B<--ssh-agent-socket> I<path>

Use this option to specify the path to the socket file that you would
like ssh-agent to create and use as its official socket. By default,
ssh-agent will create its own socket file, typically in /tmp.

=item B<--ssh-allow-forwarded>

By default, keychain will not use a forwarded ssh-agent connection,
which is a ssh-agent socket created by SSH that has no associated
local process. To permit keychain to use a forwarded ssh-agent
connection, specify this option. If a SSH-forwarded socket is used,
it will not be persisted in the pidfiles, as it is not likely to
be available outside of the currently-active SSH session.

=item B<--ssh-allow-gpg>

Would you like to have keychain use an existing gpg-agent rather than
spawning a new ssh-agent, if one is already running in your environment? This option
allows you to do so. When this option is specified, keychain will
accept an SSH_AUTH_SOCK environment variable in its environment, even
if it was created by gpg-agent. By default, keychain has a special
check to filter out any ssh-agent sockets provided by gpg-agent, and
will refuse to use them. With this option enabled, this restriction is
turned off. Please note that keychain will not actually I<spawn> a 
gpg-agent for storing SSH keys if none are available -- if you want that, 
see the B<--ssh-spawn-gpg> option, below.

ALSO NOTE: When a gpg-agent is adopted for ssh-agent duties in this way, the 
C<~/.keychain/${HOSTNAME}-sh> pidfile will be updated to reference the 
gpg-agent socket, so it will be seamlessly used by future cron jobs needing
an ssh-agent, as well as by future invocations of keychain, as long as the
B<--ssh-allow-gpg> or B<--ssh-spawn-gpg> (which implies B<--ssh-allow-gpg>)
are specified.

=item B<--ssh-spawn-gpg>

This is the option to use if you're really on-board with using gpg-agent
as a replacement for ssh-agent. Not only will keychain use a running
gpg-agent if found as per the B<--ssh-allow-gpg>, but if it needs to spawn
a new ssh-agent, it will go ahead and spawn a gpg-agent in its place, 
and use it instead. Also see notes for the B<--ssh-allow-gpg> option,
as this option also implies B<--ssh-allow-gpg>.

=item B<--systemd>

Inject environment variables into the systemd --user session.

=item B<-Q --quick>

If an ssh-agent process is running then use it.  Don't verify the list
of keys, other than making sure it's non-empty.  This option avoids
locking when possible so that multiple terminals can be opened
simultaneously without waiting on each other. See the 
L</THE QUICK SHORT-CIRCUIT> section for more information regarding
how this fits into the overall startup algorithm.

=item B<-q --quiet>

Only print messages in case of warning, error or required interactivity. As of
version 2.6.10, this also suppresses "Identities added" messages for ssh-agent.

=item B<--timeout> I<minutes>

Allows a timeout to be set for identities added to ssh-agent. When this option
is used with a keychain invocation that starts ssh-agent itself, then keychain
uses the appropriate ssh-agent option to set the default timeout for ssh-agent.
The --timeout option also gets passed to ssh-add invocations, so any keys added
to a running ssh-agent will be individually configured to have the timeout
specified, overriding any ssh-agent default.

Most users can simply use the timeout setting they desire and get the result
they want -- with all identities having the specified timeout, whether added by
keychain or not. More advanced users can use one invocation of keychain to set
the default timeout, and optionally set different timeouts for keys added by
using a subsequent invocation of keychain.

=item B<-V --version>

Show version information.

=back

=head1 EXAMPLES

This snippet should work in most shells to load two ssh keys and one gpg
key:

    eval `keychain --eval id_rsa id_dsa 0123ABCD`

For the fish shell, use the following format:

    if status --is-interactive
        keychain --eval --quiet -Q id_rsa | source
    end

If you have trouble with that in csh:

    setenv SHELL /bin/csh
    eval `keychain --eval id_rsa id_dsa 0123ABCD`

This is equivalent for Bourne shells (including bash and zsh) but
doesn't use keychain's --eval feature:

    keychain id_rsa id_dsa 0123ABCD
    [ -z "$HOSTNAME" ] && HOSTNAME=`uname -n`
    [ -f $HOME/.keychain/$HOSTNAME-sh ] && \
	    . $HOME/.keychain/$HOSTNAME-sh

This is equivalent for C shell (including tcsh):

    keychain id_rsa id_dsa 0123ABCD
    host=`uname -n`
    if (-f $HOME/.keychain/$host-csh) then
	    source $HOME/.keychain/$host-csh
    endif

To load keychain variables from a script (for example from cron) and
abort unless id_dsa is available:

    # Load keychain variables and check for id_dsa
    [ -z "$HOSTNAME" ] && HOSTNAME=`uname -n`
    . $HOME/.keychain/$HOSTNAME-sh 2>/dev/null
    ssh-add -l 2>/dev/null | grep -q id_dsa || exit 1

=head1 SEE ALSO

L<ssh-agent(1)>, L<gpg-agent(1)>, L<ssh-add(1)>, L<ssh(1)>

=head1 NOTES

Keychain was created and is currently maintained by Daniel Robbins. If you need
to report a bug or request an enhancement, please report it to the GitHub
project page at L<https://github.com/funtoo/keychain>.  For more information
about keychain, please visit L<http://www.funtoo.org/Keychain>.
